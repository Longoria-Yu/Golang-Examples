// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  password,
  email,
  mood
) VALUES (
  $1, $2, $3, $4
) RETURNING user_id, username, password, email, mood
`

type CreateUserParams struct {
	Username string       `json:"username"`
	Password string       `json:"password"`
	Email    string       `json:"email"`
	Mood     NullEnumMood `json:"mood"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Mood,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Mood,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1 and email = $2
`

type DeleteUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.Username, arg.Email)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password, email, mood FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Mood,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, username, password, email, mood FROM users
ORDER BY user_id
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.Mood,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  password = COALESCE($1, password),
  username = COALESCE($2, username),
  email = COALESCE($3, email),
  mood = COALESCE($4, mood)
WHERE
  username = $2
RETURNING user_id, username, password, email, mood
`

type UpdateUserParams struct {
	Password pgtype.Text  `json:"password"`
	Username pgtype.Text  `json:"username"`
	Email    pgtype.Text  `json:"email"`
	Mood     NullEnumMood `json:"mood"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Password,
		arg.Username,
		arg.Email,
		arg.Mood,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Mood,
	)
	return i, err
}
